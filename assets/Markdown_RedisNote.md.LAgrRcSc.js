import{_ as e,c as t,o as i,ag as a}from"./chunks/framework.CQUK54pW.js";const u=JSON.parse('{"title":"Redis笔记","description":"","frontmatter":{"title":"Redis笔记"},"headers":[],"relativePath":"Markdown/RedisNote.md","filePath":"Markdown/RedisNote.md"}'),o={name:"Markdown/RedisNote.md"};function s(r,l,d,n,c,h){return i(),t("div",null,l[0]||(l[0]=[a(`<h1 id="redis笔记" tabindex="-1">Redis笔记 <a class="header-anchor" href="#redis笔记" aria-label="Permalink to &quot;Redis笔记&quot;">​</a></h1><h2 id="理论相关" tabindex="-1">理论相关 <a class="header-anchor" href="#理论相关" aria-label="Permalink to &quot;理论相关&quot;">​</a></h2><h3 id="redis基础概念" tabindex="-1">Redis基础概念 <a class="header-anchor" href="#redis基础概念" aria-label="Permalink to &quot;Redis基础概念&quot;">​</a></h3><ul><li><strong>Redis</strong>是一种键值（key-value）类型的非关系型数据库，具有强大的读写能力，适用于高并发场景，可扩展性强。</li><li><strong>支持的数据类型</strong>：字符串（string）、列表（list）、散列（hash）、集合（set）、有序集合（zset）。</li><li><strong>单线程模型</strong>：采用单线程处理请求，性能瓶颈主要受限于内存和网络带宽，类似单线程设计的软件包括Node.js和Nginx。</li></ul><h3 id="redis事务与功能" tabindex="-1">Redis事务与功能 <a class="header-anchor" href="#redis事务与功能" aria-label="Permalink to &quot;Redis事务与功能&quot;">​</a></h3><ul><li><strong>事务支持</strong>：Redis支持事务操作，但无隔离级别概念，幻读、脏读等问题仍需注意。</li><li><strong>订阅功能</strong>： <ul><li>订阅端使用 <code>SUBSCRIBE</code> 命令创建订阅频道。</li><li>发送端使用 <code>PUBLISH</code> 向订阅端发送信息。</li></ul></li></ul><h3 id="数据库与持久化" tabindex="-1">数据库与持久化 <a class="header-anchor" href="#数据库与持久化" aria-label="Permalink to &quot;数据库与持久化&quot;">​</a></h3><ul><li><strong>默认数据库</strong>：Redis默认包含16个数据库（编号0-15），但无法直接列出所有数据库内容。</li><li><strong>持久化机制</strong>： <ul><li><strong>RDB</strong>（默认）：通过生成快照文件（<code>dump.rdb</code>）实现快速备份与恢复，适合大规模数据场景。</li><li><strong>AOF</strong>：通过记录所有写操作命令（<code>appendonly.aof</code>）保证数据完整性，适合实时性要求高的场景。</li></ul></li><li><strong>配置文件与路径</strong>： <ul><li>默认配置文件路径：<code>/etc/redis/redis.conf</code> 或 <code>/usr/local/etc/redis.conf</code>。</li><li>默认数据存储路径：<code>/var/lib/redis/</code>。</li><li>默认日志路径：<code>/var/log/redis/redis-server.log</code>。</li></ul></li></ul><h3 id="集群模式" tabindex="-1">集群模式 <a class="header-anchor" href="#集群模式" aria-label="Permalink to &quot;集群模式&quot;">​</a></h3><ul><li><strong>主从复制</strong>： <ul><li>主服务器单向同步数据到从服务器，支持读写分离和负载均衡。</li><li><strong>配置命令</strong>：<code>slaveof &lt;master-ip&gt; &lt;master-port&gt;</code>。</li><li><strong>优缺点</strong>： <ul><li>优点：降低主服务器压力，支持故障转移。</li><li>缺点：主从宕机会导致部分请求失败，数据同步可能存在延迟。</li></ul></li></ul></li><li><strong>哨兵模式</strong>：用于监控主从集群状态，实现自动故障恢复。</li></ul><h3 id="常见问题与解决方案" tabindex="-1">常见问题与解决方案 <a class="header-anchor" href="#常见问题与解决方案" aria-label="Permalink to &quot;常见问题与解决方案&quot;">​</a></h3><ul><li><strong>缓存雪崩</strong>：缓存集中过期或服务器宕机，解决方案包括设置随机过期时间、服务熔断。</li><li><strong>缓存击穿</strong>：高并发请求访问过期缓存，解决方案包括分布式锁、预加载热点数据。</li><li><strong>缓存穿透</strong>：频繁请求不存在的数据，解决方案包括布隆过滤器、空值缓存。</li></ul><h3 id="过期与淘汰策略" tabindex="-1">过期与淘汰策略 <a class="header-anchor" href="#过期与淘汰策略" aria-label="Permalink to &quot;过期与淘汰策略&quot;">​</a></h3><ul><li><strong>过期策略</strong>： <ul><li>定时过期：立即删除过期键，利好内存但增加CPU压力。</li><li>惰性过期：访问时检查过期，减少CPU消耗但可能内存泄漏。</li><li>定期过期：折中方案，周期性检查过期键。</li></ul></li><li><strong>淘汰策略</strong>（6种）： <ul><li><code>volatile-lru</code>：从已设置过期时间的数据中淘汰最近最少使用的键。</li><li><code>allkeys-lru</code>：从所有数据中淘汰最近最少使用的键。</li><li><code>noeviction</code>：不淘汰数据，返回错误（默认策略）。</li></ul></li></ul><hr><h2 id="命令相关" tabindex="-1">命令相关 <a class="header-anchor" href="#命令相关" aria-label="Permalink to &quot;命令相关&quot;">​</a></h2><h3 id="通用命令" tabindex="-1">通用命令 <a class="header-anchor" href="#通用命令" aria-label="Permalink to &quot;通用命令&quot;">​</a></h3><ul><li><code>SELECT &lt;db&gt;</code>：切换数据库。</li><li><code>FLUSHDB</code>：清空当前数据库。</li><li><code>FLUSHALL</code>：清空所有数据库。</li><li><code>KEYS *</code>：查看所有键。</li><li><code>EXPIRE &lt;key&gt; &lt;seconds&gt;</code>：设置键过期时间。</li><li><code>TYPE &lt;key&gt;</code>：查看键的数据类型。</li></ul><h3 id="字符串-string" tabindex="-1">字符串（String） <a class="header-anchor" href="#字符串-string" aria-label="Permalink to &quot;字符串（String）&quot;">​</a></h3><ul><li><code>SET &lt;key&gt; &lt;value&gt;</code>：设置键值对。</li><li><code>GET &lt;key&gt;</code>：获取键值。</li><li><code>INCR &lt;key&gt;</code>：键值自增（用于计数器）。</li><li><code>SETEX &lt;key&gt; &lt;seconds&gt; &lt;value&gt;</code>：设置键值并指定过期时间。</li><li><code>MSET &lt;key1&gt; &lt;value1&gt; &lt;key2&gt; &lt;value2&gt;</code>：批量设置键值。</li></ul><h3 id="列表-list" tabindex="-1">列表（List） <a class="header-anchor" href="#列表-list" aria-label="Permalink to &quot;列表（List）&quot;">​</a></h3><ul><li><code>LPUSH &lt;key&gt; &lt;value&gt;</code>：从列表左侧插入值。</li><li><code>LRANGE &lt;key&gt; &lt;start&gt; &lt;end&gt;</code>：获取列表范围值。</li><li><code>RPOP &lt;key&gt;</code>：移除并返回列表右侧的值。</li><li><code>LREM &lt;key&gt; &lt;count&gt; &lt;value&gt;</code>：根据值移除元素。</li></ul><h3 id="集合-set" tabindex="-1">集合（Set） <a class="header-anchor" href="#集合-set" aria-label="Permalink to &quot;集合（Set）&quot;">​</a></h3><ul><li><code>SADD &lt;key&gt; &lt;member&gt;</code>：添加成员到集合。</li><li><code>SMEMBERS &lt;key&gt;</code>：获取集合所有成员。</li><li><code>SINTER &lt;key1&gt; &lt;key2&gt;</code>：返回多个集合的交集。</li><li><code>SUNION &lt;key1&gt; &lt;key2&gt;</code>：返回多个集合的并集。</li></ul><h3 id="散列-hash" tabindex="-1">散列（Hash） <a class="header-anchor" href="#散列-hash" aria-label="Permalink to &quot;散列（Hash）&quot;">​</a></h3><ul><li><code>HSET &lt;key&gt; &lt;field&gt; &lt;value&gt;</code>：设置散列字段值。</li><li><code>HGETALL &lt;key&gt;</code>：获取散列所有字段和值。</li><li><code>HINCRBY &lt;key&gt; &lt;field&gt; &lt;increment&gt;</code>：对字段值进行增量操作。</li></ul><h3 id="有序集合-zset" tabindex="-1">有序集合（ZSet） <a class="header-anchor" href="#有序集合-zset" aria-label="Permalink to &quot;有序集合（ZSet）&quot;">​</a></h3><ul><li><code>ZADD &lt;key&gt; &lt;score&gt; &lt;member&gt;</code>：添加成员及分数。</li><li><code>ZRANGE &lt;key&gt; &lt;start&gt; &lt;stop&gt;</code>：按分数范围获取成员。</li><li><code>ZREVRANGE &lt;key&gt; &lt;start&gt; &lt;stop&gt;</code>：按分数倒序获取成员。</li></ul><h3 id="特殊数据类型" tabindex="-1">特殊数据类型 <a class="header-anchor" href="#特殊数据类型" aria-label="Permalink to &quot;特殊数据类型&quot;">​</a></h3><ul><li><strong>Geospatial</strong>（地理位置）： <ul><li><code>GEOADD &lt;key&gt; &lt;longitude&gt; &lt;latitude&gt; &lt;member&gt;</code>：添加地理坐标。</li><li><code>GEODIST &lt;key&gt; &lt;member1&gt; &lt;member2&gt;</code>：计算两地距离。</li></ul></li><li><strong>HyperLogLog</strong>（基数统计）： <ul><li><code>PFADD &lt;key&gt; &lt;element&gt;</code>：添加元素。</li><li><code>PFCOUNT &lt;key&gt;</code>：统计基数。</li></ul></li><li><strong>Bitmap</strong>（位存储）： <ul><li><code>SETBIT &lt;key&gt; &lt;offset&gt; &lt;value&gt;</code>：设置二进制位值。</li><li><code>BITCOUNT &lt;key&gt;</code>：统计值为1的位数。</li></ul></li></ul><hr><h2 id="配置与运维" tabindex="-1">配置与运维 <a class="header-anchor" href="#配置与运维" aria-label="Permalink to &quot;配置与运维&quot;">​</a></h2><h3 id="配置文件关键参数" tabindex="-1">配置文件关键参数 <a class="header-anchor" href="#配置文件关键参数" aria-label="Permalink to &quot;配置文件关键参数&quot;">​</a></h3><ul><li><code>bind 0.0.0.0</code>：允许远程访问。</li><li><code>protected-mode no</code>：关闭保护模式。</li><li><code>daemonize yes</code>：以守护进程运行。</li><li><code>port 6379</code>：默认服务端口。</li></ul><h3 id="集群配置示例" tabindex="-1">集群配置示例 <a class="header-anchor" href="#集群配置示例" aria-label="Permalink to &quot;集群配置示例&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动多实例（单机模拟集群）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis-server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis-6380.conf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --port</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6380</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redis-server</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> redis-6381.conf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --port</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6381</span></span></code></pre></div><h3 id="日志与监控" tabindex="-1">日志与监控 <a class="header-anchor" href="#日志与监控" aria-label="Permalink to &quot;日志与监控&quot;">​</a></h3><ul><li><strong>日志分析</strong>：通过<code>/var/log/redis/redis-server.log</code>跟踪运行状态。</li><li><strong>性能监控</strong>：使用<code>redis-cli --stat</code>实时查看连接与内存使用情况。</li></ul><hr><p>通过合理使用上述命令与配置，Redis可高效支撑高并发场景，并实现数据的持久化与高可用。</p>`,40)]))}const k=e(o,[["render",s]]);export{u as __pageData,k as default};
