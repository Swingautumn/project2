import{_ as e,c as t,o,ag as r}from"./chunks/framework.S-Qvb3wi.js";const p=JSON.parse('{"title":"MYSQL笔记","description":"","frontmatter":{"title":"MYSQL笔记"},"headers":[],"relativePath":"Markdown/MySQLNote.md","filePath":"Markdown/MySQLNote.md"}'),n={name:"Markdown/MySQLNote.md"};function l(i,a,h,s,d,c){return o(),t("div",null,a[0]||(a[0]=[r('<h1 id="mysql" tabindex="-1">MySQL <a class="header-anchor" href="#mysql" aria-label="Permalink to &quot;MySQL&quot;">​</a></h1><h2 id="踩坑" tabindex="-1">踩坑 <a class="header-anchor" href="#踩坑" aria-label="Permalink to &quot;踩坑&quot;">​</a></h2><p><a href="https://blog.csdn.net/zp8126/article/details/137084854" target="_blank" rel="noreferrer">CentOS上使用yum安装MySQL8</a></p><h2 id="理论相关" tabindex="-1">理论相关 <a class="header-anchor" href="#理论相关" aria-label="Permalink to &quot;理论相关&quot;">​</a></h2><h3 id="数据库的三范式" tabindex="-1">数据库的三范式： <a class="header-anchor" href="#数据库的三范式" aria-label="Permalink to &quot;数据库的三范式：&quot;">​</a></h3><ol><li>列的原子性不可分割成更多列</li><li>非主键列要完全依赖于主键列</li><li>非主键列之间不存在传递依赖。即非主键列不能依赖于其他非主键列 <strong>范式的发展代表着数据库在结构逻辑上合理化的一个过程，范式的存在有助于减少数据冗余、避免更新异常、简化查询，并提高数据的完整性</strong></li></ol><h3 id="关于mysql的acid" tabindex="-1">关于MySQL的ACID： <a class="header-anchor" href="#关于mysql的acid" aria-label="Permalink to &quot;关于MySQL的ACID：&quot;">​</a></h3><p>MySQL事务操作的四种特性即ACID：原子性、一致性、隔离性、持久性。 MySQL支持事务同时有四种隔离级别：读未提交、读已提交、可重复读、可串行化</p><p>关键词或语句：《transaction》、《start、end》、《commit、rollback》《savepoint、release savepoint》、《isolation level》</p><h3 id="备份" tabindex="-1">备份 <a class="header-anchor" href="#备份" aria-label="Permalink to &quot;备份&quot;">​</a></h3><p>常用备份工具包括Linux上的mysqldump、windows上的navicat</p><p>备份类型分为物理备份和逻辑备份，也可以分为完全备份、增量备份、差异备份。物理备份分为冷备份(脱机备份)、热备份(联机备份)、温备份</p><h3 id="mysql5与mysql8" tabindex="-1">MySQL5与MySQL8 <a class="header-anchor" href="#mysql5与mysql8" aria-label="Permalink to &quot;MySQL5与MySQL8&quot;">​</a></h3><p>MySQL8功能更强支持JSON格式、引入了窗口函数、优化了存储引擎架构，同时性能显著提升引入了索引算法优化了并发处理也增强了安全性支持SSL/TLS和角色权限控制。没有六七版本的影响因素有以下几种：项目调整和战略变化、技术难度和挑战、重构优化等，所以开发团队决定跳过6、7版本 having 在有group by的情况下放最后面</p><h3 id="innodb存储引擎与myisam存储引擎" tabindex="-1">innodb存储引擎与myisam存储引擎 <a class="header-anchor" href="#innodb存储引擎与myisam存储引擎" aria-label="Permalink to &quot;innodb存储引擎与myisam存储引擎&quot;">​</a></h3><p>innodb适用于多insert与update操作，同时支持4个事务隔离级别 | myisam适用于多select操作，擅长存储和检阅 | 关于锁有3级——行(innodb)页表(mysiam) | 关于(事务)并发：MyISAM读写互相阻塞、InnoDB 读写阻塞与事务隔离级别相关 | innodb——数据索引均缓存(聚簇索引，索引组织表)，myisam——仅缓存索引(非聚簇索引，堆组织表)</p><h3 id="double-float精度问题" tabindex="-1">double float精度问题 <a class="header-anchor" href="#double-float精度问题" aria-label="Permalink to &quot;double float精度问题&quot;">​</a></h3><p>double64位，float32位，可能存在精度丢失取而代之的是<strong>decimal</strong>，它的底层是字符串类型，不存在丢失问题</p><h3 id="mysql范围的关键词" tabindex="-1">MySQL范围的关键词 <a class="header-anchor" href="#mysql范围的关键词" aria-label="Permalink to &quot;MySQL范围的关键词&quot;">​</a></h3><p>关键词：between…and…/in/not exist/except/</p><h3 id="物理外键与逻辑外键" tabindex="-1">物理外键与逻辑外键 <a class="header-anchor" href="#物理外键与逻辑外键" aria-label="Permalink to &quot;物理外键与逻辑外键&quot;">​</a></h3><p>物理外键是在建表时就添加，逻辑外键则是通过alter语句建表后添加，企业多用逻辑外键</p><h3 id="行转列或列转行" tabindex="-1">行转列或列转行 <a class="header-anchor" href="#行转列或列转行" aria-label="Permalink to &quot;行转列或列转行&quot;">​</a></h3><p>通常使用聚合函数、条件语句或PIVOT，多数情况下利用sum函数加上case或if函数配合实现</p><h3 id="约束-主键、非空、外键、唯一、默认" tabindex="-1">约束：主键、非空、外键、唯一、默认 <a class="header-anchor" href="#约束-主键、非空、外键、唯一、默认" aria-label="Permalink to &quot;约束：主键、非空、外键、唯一、默认&quot;">​</a></h3><h3 id="mvcc——多版本并发控制" tabindex="-1">MVCC——多版本并发控制 <a class="header-anchor" href="#mvcc——多版本并发控制" aria-label="Permalink to &quot;MVCC——多版本并发控制&quot;">​</a></h3><h2 id="操作相关" tabindex="-1">操作相关 <a class="header-anchor" href="#操作相关" aria-label="Permalink to &quot;操作相关&quot;">​</a></h2><h3 id="关于存储过程的-类比函数" tabindex="-1">关于存储过程的（类比函数）： <a class="header-anchor" href="#关于存储过程的-类比函数" aria-label="Permalink to &quot;关于存储过程的（类比函数）：&quot;">​</a></h3><p>本质是一组为了完成特定功能的SQL语句集，可以直接通过存储过程的名字进行使用,常用于存储数据处理和转换(增删改)、函数之类的SQL语句</p><p>关键词：《DELIMITER //》《procedure》</p><p>MySQL 中的触发器（Trigger）是一种特殊的存储过程，在创建包含多个语句的触发器时，一定要用到DELIMITER关键词</p><h3 id="联表查询" tabindex="-1">联表查询 <a class="header-anchor" href="#联表查询" aria-label="Permalink to &quot;联表查询&quot;">​</a></h3><p>关于<strong>内外左右</strong>连接：</p><p>内连接是把匹配的关联数据显示出来；左连接是左边的表全部显示出来，右边的表显示出符合条件的数据；右连接正好相反。</p><p>MySQL默认的join on关键字连接是内连接，要允许null出现改成左连接或右连接即可</p><h3 id="函数" tabindex="-1">函数： <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数：&quot;">​</a></h3><p>关于聚合<strong>函数</strong>count与sum：</p><p>Count统计行数，Sum统计列数的具体值，根据需求进行使用，通常都可能会与group by一起使用，其他函数还有：max、min、concat(拼接)、avg、round、now、upper与lower(大小写)等等</p><h3 id="关于视图" tabindex="-1">关于视图： <a class="header-anchor" href="#关于视图" aria-label="Permalink to &quot;关于视图：&quot;">​</a></h3><p>创建和使用与建表相近(create view xxxx as select ….)，视图分为可更新视图和不可更新视图。视图的能否更新通常受到多种因素影响如：基础表是否允许更新、视图的定义语句是否使用分组或排序的关键词、聚合函数、约束以及用户权限等</p><h3 id="索引" tabindex="-1">索引 <a class="header-anchor" href="#索引" aria-label="Permalink to &quot;索引&quot;">​</a></h3><p><strong>BTree</strong>、unique、primary、其中BTree索引最常用，对应语句关键词index</p><p>主要还是Btree、哈希、空间等，设置索引有利于快速查询到指定内容，否则数据库查询是执行的全表扫描，这样通常效率很低。</p><p>相关创建：</p><p>CREATE index idx_name ON table_name(column1, column2, ...);建表时设置</p><p>ALTER TABLE table_name ADD INDEX idx_name(column1, column2, ...);建表后添加</p>',46)]))}const u=e(n,[["render",l]]);export{p as __pageData,u as default};
