import{_ as s,c as a,o as n,ag as i}from"./chunks/framework.CQUK54pW.js";const g=JSON.parse('{"title":"Linux笔记","description":"","frontmatter":{"title":"Linux笔记"},"headers":[],"relativePath":"Markdown/LinuxNote.md","filePath":"Markdown/LinuxNote.md"}'),e={name:"Markdown/LinuxNote.md"};function o(l,t,d,r,h,c){return n(),a("div",null,t[0]||(t[0]=[i(`<h2 id="各种理论" tabindex="-1">各种理论 <a class="header-anchor" href="#各种理论" aria-label="Permalink to &quot;各种理论&quot;">​</a></h2><h2 id="liunx存储技术模块" tabindex="-1">Liunx存储技术模块 <a class="header-anchor" href="#liunx存储技术模块" aria-label="Permalink to &quot;Liunx存储技术模块&quot;">​</a></h2><h3 id="关于raid" tabindex="-1">关于RAID <a class="header-anchor" href="#关于raid" aria-label="Permalink to &quot;关于RAID&quot;">​</a></h3><p>指Linux中的Redundant Arrays of Independent Disks，独立磁盘冗余阵列技术，是一种数据存储技术，旨在通过组合多个物理磁盘来提供数据冗余、增加系统容量，提高系统性能。该技术允许用户将多个磁盘组合成一个逻辑单元，从而提高容错率，增强数据包或和系统的I/O性能</p><h3 id="关于inode、硬链接、软链接" tabindex="-1">关于inode、硬链接、软链接 <a class="header-anchor" href="#关于inode、硬链接、软链接" aria-label="Permalink to &quot;关于inode、硬链接、软链接&quot;">​</a></h3><p>inode相当于一个文件的独立标识，它包含一个文件的各种元数据比如文件大小、时间戳，它采用计数制，当inode为0时，它对应的文件数据会被系统回收(删除)，而软硬链接的使用便是建立在inode唯一特性上并对其进行的拓展。</p><p>在Linux文件系统中，inode、硬链接（Hard Link）和软链接(Symbolic Link)是理解<strong>文件存储与访问机制</strong>的核心概念。它们的区别和联系如下：</p><hr><h4 id="一、核心概念与作用" tabindex="-1"><strong>一、核心概念与作用</strong> <a class="header-anchor" href="#一、核心概念与作用" aria-label="Permalink to &quot;**一、核心概念与作用**&quot;">​</a></h4><table tabindex="0"><thead><tr><th><strong>概念</strong></th><th><strong>作用</strong></th><th><strong>本质</strong></th></tr></thead><tbody><tr><td><strong>inode</strong></td><td>存储文件的<strong>元数据</strong>（大小、权限、时间戳、数据块位置等），<strong>不包含文件名</strong>。</td><td>文件的唯一身份证（通过inode号标识）</td></tr><tr><td><strong>硬链接</strong></td><td>多个文件名指向<strong>同一个inode</strong>，共享文件数据。</td><td>文件的多个别名</td></tr><tr><td><strong>软链接</strong></td><td>创建一个新文件（有自己的inode），内容为<strong>目标文件的路径</strong>。</td><td>指向另一个文件的快捷方式</td></tr></tbody></table><hr><h4 id="二、关键区别对比" tabindex="-1"><strong>二、关键区别对比</strong> <a class="header-anchor" href="#二、关键区别对比" aria-label="Permalink to &quot;**二、关键区别对比**&quot;">​</a></h4><table tabindex="0"><thead><tr><th><strong>特性</strong></th><th><strong>inode</strong></th><th><strong>硬链接</strong></th><th><strong>软链接</strong></th></tr></thead><tbody><tr><td><strong>是否占用inode</strong></td><td>是（每个文件必有唯一inode）</td><td><strong>否</strong>（共享目标文件的inode）</td><td><strong>是</strong>（拥有独立inode）</td></tr><tr><td><strong>是否跨文件系统</strong></td><td>-</td><td>❌ 不允许</td><td>✅ 允许</td></tr><tr><td><strong>链接目录</strong></td><td>-</td><td>❌ 不允许（仅超级用户可尝试）</td><td>✅ 允许</td></tr><tr><td><strong>原文件删除后</strong></td><td>inode和数据块被释放</td><td><strong>仍可访问</strong>（数据未被删除）</td><td>❌ 失效（成为“悬空链接”）</td></tr><tr><td><strong>文件大小</strong></td><td>存储元数据（通常128~256字节）</td><td>与源文件相同</td><td>等于<strong>路径字符串的长度</strong></td></tr><tr><td><strong>示例命令</strong></td><td><code>ls -i</code> 查看inode号</td><td><code>ln file1 file2</code></td><td><code>ln -s file1 symlink</code></td></tr></tbody></table><hr><p>注意软链接（符号链接）的 inode 与被链接文件的 inode 不是同一个，这是软链接与硬链接的核心区别之一</p><hr><h4 id="三、工作原理解析" tabindex="-1"><strong>三、工作原理解析</strong> <a class="header-anchor" href="#三、工作原理解析" aria-label="Permalink to &quot;**三、工作原理解析**&quot;">​</a></h4><h5 id="_1-inode-的角色" tabindex="-1"><strong>1. inode 的角色</strong> <a class="header-anchor" href="#_1-inode-的角色" aria-label="Permalink to &quot;**1. inode 的角色**&quot;">​</a></h5><ul><li>每个文件对应<strong>唯一inode</strong>，存储： <ul><li>文件类型（普通文件、目录、符号链接等）</li><li>权限（rwx）</li><li>所有者和所属组</li><li>大小、时间戳（atime/ctime/mtime）</li><li><strong>数据块指针</strong>（指向文件内容在磁盘的位置）</li></ul></li><li>通过 <code>stat filename</code> 可查看inode详情。</li></ul><h5 id="_2-硬链接的共享机制" tabindex="-1"><strong>2. 硬链接的共享机制</strong> <a class="header-anchor" href="#_2-硬链接的共享机制" aria-label="Permalink to &quot;**2. 硬链接的共享机制**&quot;">​</a></h5><ul><li>创建硬链接：<code>ln source_file hardlink</code><ul><li><strong>新文件名</strong>与<strong>原文件名</strong>指向<strong>同一个inode</strong>。</li><li>inode的<strong>链接计数（link count）</strong> 增加（通过 <code>ls -l</code> 第二列查看）。</li></ul></li><li><strong>删除文件</strong>：仅减少inode的链接计数，当计数为0时，inode和数据块才被释放。</li></ul><h5 id="_3-软链接的路径指向" tabindex="-1"><strong>3. 软链接的路径指向</strong> <a class="header-anchor" href="#_3-软链接的路径指向" aria-label="Permalink to &quot;**3. 软链接的路径指向**&quot;">​</a></h5><ul><li>创建软链接：<code>ln -s target_path symlink_name</code><ul><li>新建一个<strong>独立文件</strong>（含独立inode），文件内容存储<strong>目标路径字符串</strong>。</li><li>类似Windows快捷方式，路径解析依赖目标文件的存在。</li></ul></li></ul><hr><h4 id="四、实际场景示例" tabindex="-1"><strong>四、实际场景示例</strong> <a class="header-anchor" href="#四、实际场景示例" aria-label="Permalink to &quot;**四、实际场景示例**&quot;">​</a></h4><h5 id="场景1-硬链接的共享性" tabindex="-1"><strong>场景1：硬链接的共享性</strong> <a class="header-anchor" href="#场景1-硬链接的共享性" aria-label="Permalink to &quot;**场景1：硬链接的共享性**&quot;">​</a></h5><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建文件</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建硬链接</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ln</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看inode（相同）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 输出：12345 file1  12345 file2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除原文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 仍可通过硬链接访问</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # 输出：Hello</span></span></code></pre></div><h5 id="场景2-软链接的依赖性" tabindex="-1"><strong>场景2：软链接的依赖性</strong> <a class="header-anchor" href="#场景2-软链接的依赖性" aria-label="Permalink to &quot;**场景2：软链接的依赖性**&quot;">​</a></h5><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建软链接</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ln</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> softlink</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看软链接（指向路径）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> softlink</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # 输出：softlink -&gt; file1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除原文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 软链接失效</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> softlink</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # 报错：No such file or directory</span></span></code></pre></div><hr><h4 id="五、三者联系总结" tabindex="-1"><strong>五、三者联系总结</strong> <a class="header-anchor" href="#五、三者联系总结" aria-label="Permalink to &quot;**五、三者联系总结**&quot;">​</a></h4><ol><li><strong>inode是基石</strong>：<br> 文件的所有元信息由inode管理，硬链接和软链接均依赖inode机制。</li><li><strong>硬链接与inode直接绑定</strong>：<br> 多个文件名共享同一inode，通过链接计数管理文件生命周期。</li><li><strong>软链接独立于目标inode</strong>：<br> 自身是独立文件，仅存储路径字符串，解耦目标文件的inode。</li></ol><hr><h4 id="六、关键命令速查" tabindex="-1"><strong>六、关键命令速查</strong> <a class="header-anchor" href="#六、关键命令速查" aria-label="Permalink to &quot;**六、关键命令速查**&quot;">​</a></h4><table tabindex="0"><thead><tr><th><strong>命令</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><code>ls -i</code></td><td>查看文件inode号</td></tr><tr><td><code>stat filename</code></td><td>显示文件inode详情</td></tr><tr><td><code>ln source hardlink</code></td><td>创建硬链接</td></tr><tr><td><code>ln -s target symlink</code></td><td>创建软链接</td></tr><tr><td><code>find / -inum 12345</code></td><td>根据inode号查找文件</td></tr></tbody></table><hr><h4 id="七、总结" tabindex="-1"><strong>七、总结</strong> <a class="header-anchor" href="#七、总结" aria-label="Permalink to &quot;**七、总结**&quot;">​</a></h4><ul><li><strong>inode</strong>：文件的元数据容器（不含文件名）。</li><li><strong>硬链接</strong>：多个文件名指向同一inode（<strong>共享数据、不可跨分区、删除不影响数据</strong>）。</li><li><strong>软链接</strong>：独立文件存储目标路径（<strong>可跨分区、指向目录、依赖原文件</strong>）。<br><strong>本质区别</strong>：硬链接是文件实体的别名，软链接是路径的引用。</li></ul><h2 id="linux系统架构模块" tabindex="-1">Linux系统架构模块 <a class="header-anchor" href="#linux系统架构模块" aria-label="Permalink to &quot;Linux系统架构模块&quot;">​</a></h2><h3 id="关于lilo" tabindex="-1">关于LILO <a class="header-anchor" href="#关于lilo" aria-label="Permalink to &quot;关于LILO&quot;">​</a></h3><p>LILO是Linux的引导加载程序。它主要用于将Linux操作系统加载到主内存中，以便它可以开始运行</p><h3 id="关于linux系统运行级别" tabindex="-1">关于Linux系统运行级别 <a class="header-anchor" href="#关于linux系统运行级别" aria-label="Permalink to &quot;关于Linux系统运行级别&quot;">​</a></h3><p>常用的运行级别为3(多用户带网络)和5(图形)。</p><h3 id="linux运行级别详解" tabindex="-1">Linux运行级别详解 <a class="header-anchor" href="#linux运行级别详解" aria-label="Permalink to &quot;Linux运行级别详解&quot;">​</a></h3><table tabindex="0"><thead><tr><th>运行级别</th><th>英文名称</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td><strong>Halt</strong></td><td>系统停机状态，关闭所有服务和进程（不可设为默认级别）</td></tr><tr><td>1</td><td><strong>Single User Mode</strong></td><td>单用户维护模式，仅root可本地登录（禁用网络）</td></tr><tr><td>2</td><td><strong>Multi-User (No Network)</strong></td><td>多用户模式（无网络服务），基础用户登录支持</td></tr><tr><td>3</td><td><strong>Multi-User (Network)</strong></td><td>完整多用户模式（带网络服务），服务器默认级别</td></tr><tr><td>4</td><td><strong>User-Defined</strong></td><td>系统保留级别，可由管理员自定义用途</td></tr><tr><td>5</td><td><strong>Graphical Interface</strong></td><td>带图形界面的多用户模式（GUI桌面环境）</td></tr><tr><td>6</td><td><strong>Reboot</strong></td><td>系统重启模式（不可设为默认级别）</td></tr></tbody></table><h4 id="关键特性对比" tabindex="-1">关键特性对比 <a class="header-anchor" href="#关键特性对比" aria-label="Permalink to &quot;关键特性对比&quot;">​</a></h4><table tabindex="0"><thead><tr><th><strong>特性</strong></th><th>关键级别</th><th>说明</th></tr></thead><tbody><tr><td><strong>默认服务器级</strong></td><td>3</td><td>无GUI的资源优化模式，通过SSH远程管理</td></tr><tr><td><strong>桌面环境级</strong></td><td>5</td><td>启用X Window等图形服务</td></tr><tr><td><strong>灾难恢复级</strong></td><td>1</td><td>无网络、无服务状态，用于修复系统/修改root密码</td></tr><tr><td><strong>危险级别</strong></td><td>0/6</td><td>系统关机/重启状态，设为默认将导致系统循环关机/重启</td></tr><tr><td><strong>自定义级</strong></td><td>4</td><td>可配置为：<br>• 无GUI的增强安全模式<br>• 专用应用程序运行环境</td></tr></tbody></table><p><strong>管理命令</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看当前运行级别</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runlevel</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 永久切换默认级别（例：切换到文本模式）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set-default</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> multi-user.target</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 对应级别3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 临时切换级别（例：启动图形界面）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">init</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 紧急救援（单用户模式）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rescue</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 新式Systemd命令</span></span></code></pre></div><h3 id="关于linux内核" tabindex="-1">关于Linux内核 <a class="header-anchor" href="#关于linux内核" aria-label="Permalink to &quot;关于Linux内核&quot;">​</a></h3><p>也叫Linux kernel，是操作系统的核心组件之一，其功能众多包括进程管理，文件系统等，其中文件系统采用的是overlayFS（UnionFS(联合文件系统）的一种实现）方法，其他组件包括shell和GUI，系统实用程序和应用程序</p><h3 id="关于linux文件系统" tabindex="-1">关于Linux文件系统 <a class="header-anchor" href="#关于linux文件系统" aria-label="Permalink to &quot;关于Linux文件系统&quot;">​</a></h3><ol><li>Linux文件系统是一种组织和管理磁盘上文件和目录的层次结构。它<strong>采用树形结构，以根目录（/）为起点， 统一管理所有存储资源。</strong>。同时通过与分区策略和高级文件系统技术的深度整合，为系统提供了灵活高效的存储解决方案。</li><li>它不仅负责数据存储，同时支持文件访问控制、磁盘空间分配等功能，采用的是<strong>overlayFS系统</strong></li><li>Linux默认分区包括<strong>根分区、启动分区、交换分区、用户分区还有、var分区</strong>等等</li></ol><p><strong>核心架构的三层协同</strong></p><table tabindex="0"><thead><tr><th><strong>层级</strong></th><th><strong>功能</strong></th><th><strong>技术实现</strong></th></tr></thead><tbody><tr><td><strong>1. 树形结构层</strong></td><td>提供统一的逻辑视图<br>（根目录/为起点，目录挂载到分区）</td><td>所有分区必须挂载到目录树节点<br>（如 /home 挂载到用户分区）</td></tr><tr><td><strong>2. 分区存储层</strong></td><td>物理隔离关键数据<br>优化I/O性能与安全</td><td>默认分区方案：<br>- <code>/</code>（根分区）<br>- <code>/boot</code>（启动分区）<br>- <code>swap</code>（交换分区）<br>- <code>/home</code>（用户分区）<br>- <code>/var</code>（日志分区）</td></tr><tr><td><strong>3. 联合抽象层</strong></td><td>实现分层读写与版本叠加<br>（容器/系统升级的关键支撑）</td><td>OverlayFS（UnionFS的实现）<br>通过lowerdir/upperdir/workdir合并多层存储</td></tr></tbody></table><hr><h2 id="linux系统运维模块" tabindex="-1">Linux系统运维模块 <a class="header-anchor" href="#linux系统运维模块" aria-label="Permalink to &quot;Linux系统运维模块&quot;">​</a></h2><h3 id="关于linux系统层安全操作" tabindex="-1">关于Linux系统层安全操作 <a class="header-anchor" href="#关于linux系统层安全操作" aria-label="Permalink to &quot;关于Linux系统层安全操作&quot;">​</a></h3><ol><li>Root账户设置高强度密码，定期更换密码</li><li>禁用多余服务，及时更新系统软件</li><li>配置防火墙/SSH策略</li></ol><h3 id="关于linux用户层安全操作" tabindex="-1">关于Linux用户层安全操作 <a class="header-anchor" href="#关于linux用户层安全操作" aria-label="Permalink to &quot;关于Linux用户层安全操作&quot;">​</a></h3><ol><li>管理用户、组的权限</li><li>文件本身权限</li></ol><h3 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h3><p>常用命令</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>添加用户：useradd XXX, 设置用户密码：passwd XXX。验证SSH xxx@localhost</span></span>
<span class="line"><span>usermod -g old-xxx new-xxx 修改用户组</span></span>
<span class="line"><span>chown修改所属情况(所有者、所属组、其他用户)、chmod修改读写执行权限(读4写2执行1)</span></span>
<span class="line"><span>相关路径：/etc/passwd, /etc/shadow,/etc/sudoers(配置sudo权限)</span></span></code></pre></div><p>拓展：关于Sticky Bit，Linux的文件具有读写执行权限，为了防止文件被意外删除，额外添加了一种权限——t，即Sticky Bit</p><h2 id="linux常用命令模块" tabindex="-1">Linux常用命令模块 <a class="header-anchor" href="#linux常用命令模块" aria-label="Permalink to &quot;Linux常用命令模块&quot;">​</a></h2><pre><code>  Linux三剑客：grep、sed、awk
</code></pre><h3 id="基础命令" tabindex="-1">基础命令 <a class="header-anchor" href="#基础命令" aria-label="Permalink to &quot;基础命令&quot;">​</a></h3><h4 id="一、基础操作与文件管理" tabindex="-1"><strong>一、基础操作与文件管理</strong> <a class="header-anchor" href="#一、基础操作与文件管理" aria-label="Permalink to &quot;**一、基础操作与文件管理**&quot;">​</a></h4><ul><li><strong>用途</strong>：系统导航、文件/目录操作及信息查看</li><li><strong>常用命令</strong>： <ul><li><code>cd</code>：切换目录</li><li><code>ls</code>：列出目录内容（<code>-l</code> 详细信息，<code>-a</code> 显示隐藏文件）</li><li><code>pwd</code>：显示当前路径</li><li><code>cp</code>：复制文件/目录</li><li><code>mv</code>：移动或重命名文件</li><li><code>rm</code>：删除文件/目录（<code>-r</code>代表递归删除recursive <code>-f</code>代表强制删除force） <ul><li><code>-rf *</code> 删除当前目录下的所有文件</li></ul></li><li><code>touch</code>：创建空文件或更新文件时间戳</li><li><code>cat</code>/<code>less</code>/<code>more</code>：查看文件内容</li><li><code>find</code>：搜索文件（如 <code>find /home -name &quot;*.txt&quot;</code>）</li><li><code>grep</code>：文本搜索（如 <code>grep &quot;error&quot; log.txt</code>）</li></ul></li></ul><hr><h4 id="二、系统管理与权限控制" tabindex="-1"><strong>二、系统管理与权限控制</strong> <a class="header-anchor" href="#二、系统管理与权限控制" aria-label="Permalink to &quot;**二、系统管理与权限控制**&quot;">​</a></h4><ul><li><strong>用途</strong>：用户/权限管理、进程监控及系统状态</li><li><strong>常用命令</strong>： <ul><li><code>sudo</code>：以管理员权限执行命令</li><li><code>chmod</code>：修改文件权限（如 <code>chmod 755 script.sh</code>）</li><li><code>chown</code>：修改文件所有者（如 <code>chown user:group file</code>）</li><li><code>ps</code>：查看进程状态（<code>ps aux</code> 显示所有进程）</li><li><code>top</code>/<code>htop</code>：实时监控系统资源（CPU、内存等）</li><li><code>kill</code>：终止进程（如 <code>kill -9 PID</code>）</li><li><code>systemctl</code>：管理系统服务（如 <code>systemctl start nginx</code>）</li><li><code>df</code>/<code>du</code>：查看磁盘空间（<code>df -h</code> 人性化显示，<code>du -sh dir</code> 统计目录大小）</li><li><code>journalctl</code>：查看系统日志（如 <code>journalctl -u service</code>）</li></ul></li></ul><hr><h4 id="三、网络与通信" tabindex="-1"><strong>三、网络与通信</strong> <a class="header-anchor" href="#三、网络与通信" aria-label="Permalink to &quot;**三、网络与通信**&quot;">​</a></h4><ul><li><strong>用途</strong>：网络配置、连接测试及数据传输</li><li><strong>常用命令</strong>： <ul><li><code>ping</code>：测试网络连通性</li><li><code>curl</code>/<code>wget</code>：下载文件或测试API</li><li><code>ssh</code>：远程登录（如 <code>ssh user@host</code>）</li><li><code>scp</code>：安全传输文件（如 <code>scp file user@host:/path</code>）</li><li><code>ifconfig</code>/<code>ip</code>：查看或配置网络接口</li><li><code>netstat</code>/<code>ss</code>：查看网络连接状态（如 <code>netstat -tulnp</code>）</li><li><code>traceroute</code>：追踪数据包路径</li><li><code>nslookup</code>/<code>dig</code>：DNS查询</li><li><code>nc</code>：网络调试工具（端口扫描、数据传输）</li></ul></li></ul><hr><h4 id="四、软件包管理与开发工具" tabindex="-1"><strong>四、软件包管理与开发工具</strong> <a class="header-anchor" href="#四、软件包管理与开发工具" aria-label="Permalink to &quot;**四、软件包管理与开发工具**&quot;">​</a></h4><ul><li><strong>用途</strong>：软件安装、编译及版本控制</li><li><strong>常用压缩包格式</strong>：tgz、gz、tar、bz2、xz等等</li><li><strong>常用命令</strong>： <ul><li><code>apt</code>/<code>yum</code>/<code>dnf</code>：包管理工具（Debian/RedHat系）</li><li><code>dpkg</code>/<code>rpm</code>：直接安装本地软件包</li><li><code>make</code>：编译源码（配合 <code>Makefile</code> 使用）</li><li><code>gcc</code>/<code>g++</code>：C/C++代码编译</li><li><code>git</code>：版本控制（<code>clone</code>、<code>commit</code>、<code>push</code> 等）</li><li><code>pip</code>/<code>npm</code>：Python/Node.js包管理</li><li><code>tar</code>/<code>zip</code>：文件压缩与解压（如 <code>tar -xzvf file.tar.gz -C解压并指定位置</code>、<code>tar -zcvf 压缩</code>）</li><li><code>vim</code>/<code>nano</code>：文本编辑工具</li></ul></li></ul><hr><p>管理文件类型：ls、cd、mkdir、cp、mv、tail -f等 进程管理类型：kill、ps -ef、top/htop、nohup等 服务器系统类型：shutdown、uname、uptime、df、du、free等</p><pre><code>注意点：
1. df是查看整个文件系统的空闲空间，而du是查看特定文件或目录的磁盘使用情况
2. kill -9强制杀死，kill -15 允许自行清理后杀死。推荐先15不行再9
</code></pre><h3 id="环境变量设置" tabindex="-1">环境变量设置 <a class="header-anchor" href="#环境变量设置" aria-label="Permalink to &quot;环境变量设置&quot;">​</a></h3><p>文件路径:/etc/profile。修改后用source重载 文本内容添加参考:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>export NGINX_HOME=/usr/local/nginx\`</span></span>
<span class="line"><span>export PATH=$PATH:$PROMETHEUS_HOME:$NGINX_HOME/sbin</span></span></code></pre></div><h4 id="好用的环境变量1" tabindex="-1">好用的环境变量1 <a class="header-anchor" href="#好用的环境变量1" aria-label="Permalink to &quot;好用的环境变量1&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 创建脚本,自动添加执行权限然后用VIM打开</span></span>
<span class="line"><span>mkshv(){</span></span>
<span class="line"><span>	if [[ $# -eq 0 ]];then</span></span>
<span class="line"><span>		echo &quot;用法：mkshv &lt;脚本名.sh&gt;&quot;</span></span>
<span class="line"><span>		return 1</span></span>
<span class="line"><span>	fi</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	local file=&quot;$1&quot;</span></span>
<span class="line"><span>	touch &quot;$file&quot; &amp;&amp; chmod +x &quot;$file&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	if [[ ! -f &quot;$file&quot; ]];then</span></span>
<span class="line"><span>		echo &quot;错误：无法创建文件 $file&quot;</span></span>
<span class="line"><span>		return 2</span></span>
<span class="line"><span>	fi</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	if [[ ! -s &quot;$file&quot; ]];then</span></span>
<span class="line"><span>		echo &#39;#! /bin/bash&#39;&gt;&gt; &quot;$file&quot;</span></span>
<span class="line"><span>		echo &quot;# 自动创建于：$(date)&quot; &gt;&gt; &quot;$file&quot;</span></span>
<span class="line"><span>		echo &quot;&quot; &gt;&gt; &quot;$file&quot;</span></span>
<span class="line"><span>	fi</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	vim &quot;$file&quot;</span></span>
<span class="line"><span>	echo &quot;√ 已创建脚本：$file&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="shell编程" tabindex="-1">shell编程 <a class="header-anchor" href="#shell编程" aria-label="Permalink to &quot;shell编程&quot;">​</a></h3><p><strong>Linux的shell脚本格式注意：“#! /bin/bash”</strong> 关系运算符： ！判断反逻辑、-eq判断相等、 -ge判断是否大于等于、-gt判断是否大于、 -lt判断是否小于、-le判断是否小于等于、 -f判断文件存在、-d判断目录存在、-e判断文件或目录存在、</p><h3 id="vim命令" tabindex="-1">Vim命令 <a class="header-anchor" href="#vim命令" aria-label="Permalink to &quot;Vim命令&quot;">​</a></h3><ul><li><strong>显示设置</strong>：<code>set list</code>（显示不可见字符）、<code>set nu</code>（显示行号）</li><li><strong>搜索操作</strong>：<code>/xxx</code>（搜索xxx并高亮）、<code>:noh</code>（取消高亮）</li><li><strong>编辑命令</strong>：<code>dd</code>（删除行）、<code>yy</code>（复制行）、<code>p</code>（粘贴到光标后）、<code>%d</code>（清空文件全部内容）</li><li><strong>模式切换</strong>：<code>v</code>（视图模式）、<code>a</code>（编辑模式）</li><li><strong>实例test</strong>：删除20到31行命令 :20,31d</li></ul><p><code>echo</code>命令含<code>!</code>可能报<code>event not found</code></p><p>echo文本输出打印、</p><h3 id="其他-1" tabindex="-1">其他 <a class="header-anchor" href="#其他-1" aria-label="Permalink to &quot;其他&quot;">​</a></h3><p>Linux的定时服务 cron命令、《/etc/crontab文件》《crontab -e》、《anacron》.《at命令》等也可以借用第三方工具如：fcron、dcron等</p>`,95)]))}const u=s(e,[["render",o]]);export{g as __pageData,u as default};
